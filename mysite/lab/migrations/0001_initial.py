# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import datetime
import lab.models
import django.utils.timezone
import mptt.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('email', models.EmailField(unique=True, max_length=75, verbose_name='email address')),
                ('first_name', models.CharField(max_length=200, blank=True)),
                ('last_name', models.CharField(max_length=200, blank=True)),
                ('display_name', models.CharField(max_length=200, blank=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, null=True, blank=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('street', models.CharField(max_length=200)),
                ('unit', models.CharField(max_length=200, blank=True)),
                ('phone', models.CharField(max_length=200, blank=True)),
                ('phone2', models.CharField(max_length=200, blank=True)),
                ('fax', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ('street',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Brick',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DayConfig',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ForceNode',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('bricks', models.ManyToManyField(related_name=b'nodes', to='lab.Brick', blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ForceVisit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('observations', models.TextField(blank=True)),
                ('rec', models.TextField(blank=True)),
                ('duration', models.TimeField(default=datetime.time(0, 45), choices=[(datetime.time(0, 15), b'00:15'), (datetime.time(0, 30), b'00:30'), (datetime.time(0, 45), b'00:45'), (datetime.time(1, 0), b'01:00'), (datetime.time(1, 15), b'01:15'), (datetime.time(1, 30), b'01:30')])),
                ('status', models.CharField(default=b's', max_length=2, choices=[(b's', b'Scheduled'), (b'v', b'Visited'), (b'n', b'Negative'), (b'r', b'Re-scheduled')])),
                ('accompanied', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-datetime',),
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
                ('scope', models.CharField(default=b'visits', max_length=20, choices=[(b'visits', b'visits'), (b'users', b'users')])),
                ('private', models.BooleanField(default=False)),
                ('start', models.DateTimeField(null=True, blank=True)),
                ('end', models.DateTimeField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('expandable', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FormCat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.FormCat', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(default=b'string', max_length=20, choices=[(b'string', b'string'), (b'boolean', b'boolean'), (b'date', b'date'), (b'opts', b'opts'), (b'optscat', b'optscat'), (b'optscat-all', b'optscat-all')])),
                ('widget', models.CharField(default=b'def', max_length=20, choices=[(b'def', b'def'), (b'radios', b'radios'), (b'textarea', b'textarea')])),
                ('default', models.CharField(max_length=200, blank=True)),
                ('required', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('opts1', models.TextField(help_text='Each option in a separate line with format Value:Label', blank=True)),
                ('form', models.ForeignKey(related_name=b'fields', to='lab.Form')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FormType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='GenericCat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.GenericCat', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
                ('forms_description', models.TextField(blank=True)),
                ('forms_expandable', models.BooleanField(default=False)),
                ('forms_order', models.IntegerField(default=0, null=True, blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ItemCat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.ItemCat', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Loc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, blank=True)),
                ('address', models.OneToOneField(related_name=b'loc', null=True, blank=True, to='lab.Address')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LocCat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.LocCat', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OnOffPeriod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('on', models.BooleanField(default=False)),
                ('start', models.DateField()),
                ('end', models.DateField()),
                ('visit_user', models.ForeignKey(related_name=b'onoffperiod_visit', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True)),
                ('visited_loc', models.ForeignKey(related_name=b'onoffperiod_visited', blank=True, editable=False, to='lab.Loc', null=True)),
                ('visited_user', models.ForeignKey(related_name=b'onoffperiod_visited', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OnOffTime',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('on', models.BooleanField(default=False)),
                ('start', models.TimeField(choices=[(datetime.time(0, 0), b'00:00'), (datetime.time(0, 15), b'00:15'), (datetime.time(0, 30), b'00:30'), (datetime.time(0, 45), b'00:45'), (datetime.time(1, 0), b'01:00'), (datetime.time(1, 15), b'01:15'), (datetime.time(1, 30), b'01:30'), (datetime.time(1, 45), b'01:45'), (datetime.time(2, 0), b'02:00'), (datetime.time(2, 15), b'02:15'), (datetime.time(2, 30), b'02:30'), (datetime.time(2, 45), b'02:45'), (datetime.time(3, 0), b'03:00'), (datetime.time(3, 15), b'03:15'), (datetime.time(3, 30), b'03:30'), (datetime.time(3, 45), b'03:45'), (datetime.time(4, 0), b'04:00'), (datetime.time(4, 15), b'04:15'), (datetime.time(4, 30), b'04:30'), (datetime.time(4, 45), b'04:45'), (datetime.time(5, 0), b'05:00'), (datetime.time(5, 15), b'05:15'), (datetime.time(5, 30), b'05:30'), (datetime.time(5, 45), b'05:45'), (datetime.time(6, 0), b'06:00'), (datetime.time(6, 15), b'06:15'), (datetime.time(6, 30), b'06:30'), (datetime.time(6, 45), b'06:45'), (datetime.time(7, 0), b'07:00'), (datetime.time(7, 15), b'07:15'), (datetime.time(7, 30), b'07:30'), (datetime.time(7, 45), b'07:45'), (datetime.time(8, 0), b'08:00'), (datetime.time(8, 15), b'08:15'), (datetime.time(8, 30), b'08:30'), (datetime.time(8, 45), b'08:45'), (datetime.time(9, 0), b'09:00'), (datetime.time(9, 15), b'09:15'), (datetime.time(9, 30), b'09:30'), (datetime.time(9, 45), b'09:45'), (datetime.time(10, 0), b'10:00'), (datetime.time(10, 15), b'10:15'), (datetime.time(10, 30), b'10:30'), (datetime.time(10, 45), b'10:45'), (datetime.time(11, 0), b'11:00'), (datetime.time(11, 15), b'11:15'), (datetime.time(11, 30), b'11:30'), (datetime.time(11, 45), b'11:45'), (datetime.time(12, 0), b'12:00'), (datetime.time(12, 15), b'12:15'), (datetime.time(12, 30), b'12:30'), (datetime.time(12, 45), b'12:45'), (datetime.time(13, 0), b'13:00'), (datetime.time(13, 15), b'13:15'), (datetime.time(13, 30), b'13:30'), (datetime.time(13, 45), b'13:45'), (datetime.time(14, 0), b'14:00'), (datetime.time(14, 15), b'14:15'), (datetime.time(14, 30), b'14:30'), (datetime.time(14, 45), b'14:45'), (datetime.time(15, 0), b'15:00'), (datetime.time(15, 15), b'15:15'), (datetime.time(15, 30), b'15:30'), (datetime.time(15, 45), b'15:45'), (datetime.time(16, 0), b'16:00'), (datetime.time(16, 15), b'16:15'), (datetime.time(16, 30), b'16:30'), (datetime.time(16, 45), b'16:45'), (datetime.time(17, 0), b'17:00'), (datetime.time(17, 15), b'17:15'), (datetime.time(17, 30), b'17:30'), (datetime.time(17, 45), b'17:45'), (datetime.time(18, 0), b'18:00'), (datetime.time(18, 15), b'18:15'), (datetime.time(18, 30), b'18:30'), (datetime.time(18, 45), b'18:45'), (datetime.time(19, 0), b'19:00'), (datetime.time(19, 15), b'19:15'), (datetime.time(19, 30), b'19:30'), (datetime.time(19, 45), b'19:45'), (datetime.time(20, 0), b'20:00'), (datetime.time(20, 15), b'20:15'), (datetime.time(20, 30), b'20:30'), (datetime.time(20, 45), b'20:45'), (datetime.time(21, 0), b'21:00'), (datetime.time(21, 15), b'21:15'), (datetime.time(21, 30), b'21:30'), (datetime.time(21, 45), b'21:45'), (datetime.time(22, 0), b'22:00'), (datetime.time(22, 15), b'22:15'), (datetime.time(22, 30), b'22:30'), (datetime.time(22, 45), b'22:45'), (datetime.time(23, 0), b'23:00'), (datetime.time(23, 15), b'23:15'), (datetime.time(23, 30), b'23:30'), (datetime.time(23, 45), b'23:45')])),
                ('end', models.TimeField(choices=[(datetime.time(0, 0), b'00:00'), (datetime.time(0, 15), b'00:15'), (datetime.time(0, 30), b'00:30'), (datetime.time(0, 45), b'00:45'), (datetime.time(1, 0), b'01:00'), (datetime.time(1, 15), b'01:15'), (datetime.time(1, 30), b'01:30'), (datetime.time(1, 45), b'01:45'), (datetime.time(2, 0), b'02:00'), (datetime.time(2, 15), b'02:15'), (datetime.time(2, 30), b'02:30'), (datetime.time(2, 45), b'02:45'), (datetime.time(3, 0), b'03:00'), (datetime.time(3, 15), b'03:15'), (datetime.time(3, 30), b'03:30'), (datetime.time(3, 45), b'03:45'), (datetime.time(4, 0), b'04:00'), (datetime.time(4, 15), b'04:15'), (datetime.time(4, 30), b'04:30'), (datetime.time(4, 45), b'04:45'), (datetime.time(5, 0), b'05:00'), (datetime.time(5, 15), b'05:15'), (datetime.time(5, 30), b'05:30'), (datetime.time(5, 45), b'05:45'), (datetime.time(6, 0), b'06:00'), (datetime.time(6, 15), b'06:15'), (datetime.time(6, 30), b'06:30'), (datetime.time(6, 45), b'06:45'), (datetime.time(7, 0), b'07:00'), (datetime.time(7, 15), b'07:15'), (datetime.time(7, 30), b'07:30'), (datetime.time(7, 45), b'07:45'), (datetime.time(8, 0), b'08:00'), (datetime.time(8, 15), b'08:15'), (datetime.time(8, 30), b'08:30'), (datetime.time(8, 45), b'08:45'), (datetime.time(9, 0), b'09:00'), (datetime.time(9, 15), b'09:15'), (datetime.time(9, 30), b'09:30'), (datetime.time(9, 45), b'09:45'), (datetime.time(10, 0), b'10:00'), (datetime.time(10, 15), b'10:15'), (datetime.time(10, 30), b'10:30'), (datetime.time(10, 45), b'10:45'), (datetime.time(11, 0), b'11:00'), (datetime.time(11, 15), b'11:15'), (datetime.time(11, 30), b'11:30'), (datetime.time(11, 45), b'11:45'), (datetime.time(12, 0), b'12:00'), (datetime.time(12, 15), b'12:15'), (datetime.time(12, 30), b'12:30'), (datetime.time(12, 45), b'12:45'), (datetime.time(13, 0), b'13:00'), (datetime.time(13, 15), b'13:15'), (datetime.time(13, 30), b'13:30'), (datetime.time(13, 45), b'13:45'), (datetime.time(14, 0), b'14:00'), (datetime.time(14, 15), b'14:15'), (datetime.time(14, 30), b'14:30'), (datetime.time(14, 45), b'14:45'), (datetime.time(15, 0), b'15:00'), (datetime.time(15, 15), b'15:15'), (datetime.time(15, 30), b'15:30'), (datetime.time(15, 45), b'15:45'), (datetime.time(16, 0), b'16:00'), (datetime.time(16, 15), b'16:15'), (datetime.time(16, 30), b'16:30'), (datetime.time(16, 45), b'16:45'), (datetime.time(17, 0), b'17:00'), (datetime.time(17, 15), b'17:15'), (datetime.time(17, 30), b'17:30'), (datetime.time(17, 45), b'17:45'), (datetime.time(18, 0), b'18:00'), (datetime.time(18, 15), b'18:15'), (datetime.time(18, 30), b'18:30'), (datetime.time(18, 45), b'18:45'), (datetime.time(19, 0), b'19:00'), (datetime.time(19, 15), b'19:15'), (datetime.time(19, 30), b'19:30'), (datetime.time(19, 45), b'19:45'), (datetime.time(20, 0), b'20:00'), (datetime.time(20, 15), b'20:15'), (datetime.time(20, 30), b'20:30'), (datetime.time(20, 45), b'20:45'), (datetime.time(21, 0), b'21:00'), (datetime.time(21, 15), b'21:15'), (datetime.time(21, 30), b'21:30'), (datetime.time(21, 45), b'21:45'), (datetime.time(22, 0), b'22:00'), (datetime.time(22, 15), b'22:15'), (datetime.time(22, 30), b'22:30'), (datetime.time(22, 45), b'22:45'), (datetime.time(23, 0), b'23:00'), (datetime.time(23, 15), b'23:15'), (datetime.time(23, 30), b'23:30'), (datetime.time(23, 45), b'23:45')])),
                ('date', models.DateField(null=True, blank=True)),
                ('visit_user', models.ForeignKey(related_name=b'onofftime_visit', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True)),
                ('visited_loc', models.ForeignKey(related_name=b'onofftime_visited', blank=True, editable=False, to='lab.Loc', null=True)),
                ('visited_user', models.ForeignKey(related_name=b'onofftime_visited', blank=True, editable=False, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
                ('end', models.DateField()),
            ],
            options={
                'ordering': ('-end',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PeriodCat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.PeriodCat', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('address', models.ForeignKey(related_name=b'places', blank=True, to='lab.Address', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PlaceCat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.PlaceCat', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('country', models.ForeignKey(related_name=b'states', to='lab.Country')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Sys',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TimeConfig',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, blank=True)),
                ('start', models.TimeField(choices=[(datetime.time(0, 0), b'00:00'), (datetime.time(0, 15), b'00:15'), (datetime.time(0, 30), b'00:30'), (datetime.time(0, 45), b'00:45'), (datetime.time(1, 0), b'01:00'), (datetime.time(1, 15), b'01:15'), (datetime.time(1, 30), b'01:30'), (datetime.time(1, 45), b'01:45'), (datetime.time(2, 0), b'02:00'), (datetime.time(2, 15), b'02:15'), (datetime.time(2, 30), b'02:30'), (datetime.time(2, 45), b'02:45'), (datetime.time(3, 0), b'03:00'), (datetime.time(3, 15), b'03:15'), (datetime.time(3, 30), b'03:30'), (datetime.time(3, 45), b'03:45'), (datetime.time(4, 0), b'04:00'), (datetime.time(4, 15), b'04:15'), (datetime.time(4, 30), b'04:30'), (datetime.time(4, 45), b'04:45'), (datetime.time(5, 0), b'05:00'), (datetime.time(5, 15), b'05:15'), (datetime.time(5, 30), b'05:30'), (datetime.time(5, 45), b'05:45'), (datetime.time(6, 0), b'06:00'), (datetime.time(6, 15), b'06:15'), (datetime.time(6, 30), b'06:30'), (datetime.time(6, 45), b'06:45'), (datetime.time(7, 0), b'07:00'), (datetime.time(7, 15), b'07:15'), (datetime.time(7, 30), b'07:30'), (datetime.time(7, 45), b'07:45'), (datetime.time(8, 0), b'08:00'), (datetime.time(8, 15), b'08:15'), (datetime.time(8, 30), b'08:30'), (datetime.time(8, 45), b'08:45'), (datetime.time(9, 0), b'09:00'), (datetime.time(9, 15), b'09:15'), (datetime.time(9, 30), b'09:30'), (datetime.time(9, 45), b'09:45'), (datetime.time(10, 0), b'10:00'), (datetime.time(10, 15), b'10:15'), (datetime.time(10, 30), b'10:30'), (datetime.time(10, 45), b'10:45'), (datetime.time(11, 0), b'11:00'), (datetime.time(11, 15), b'11:15'), (datetime.time(11, 30), b'11:30'), (datetime.time(11, 45), b'11:45'), (datetime.time(12, 0), b'12:00'), (datetime.time(12, 15), b'12:15'), (datetime.time(12, 30), b'12:30'), (datetime.time(12, 45), b'12:45'), (datetime.time(13, 0), b'13:00'), (datetime.time(13, 15), b'13:15'), (datetime.time(13, 30), b'13:30'), (datetime.time(13, 45), b'13:45'), (datetime.time(14, 0), b'14:00'), (datetime.time(14, 15), b'14:15'), (datetime.time(14, 30), b'14:30'), (datetime.time(14, 45), b'14:45'), (datetime.time(15, 0), b'15:00'), (datetime.time(15, 15), b'15:15'), (datetime.time(15, 30), b'15:30'), (datetime.time(15, 45), b'15:45'), (datetime.time(16, 0), b'16:00'), (datetime.time(16, 15), b'16:15'), (datetime.time(16, 30), b'16:30'), (datetime.time(16, 45), b'16:45'), (datetime.time(17, 0), b'17:00'), (datetime.time(17, 15), b'17:15'), (datetime.time(17, 30), b'17:30'), (datetime.time(17, 45), b'17:45'), (datetime.time(18, 0), b'18:00'), (datetime.time(18, 15), b'18:15'), (datetime.time(18, 30), b'18:30'), (datetime.time(18, 45), b'18:45'), (datetime.time(19, 0), b'19:00'), (datetime.time(19, 15), b'19:15'), (datetime.time(19, 30), b'19:30'), (datetime.time(19, 45), b'19:45'), (datetime.time(20, 0), b'20:00'), (datetime.time(20, 15), b'20:15'), (datetime.time(20, 30), b'20:30'), (datetime.time(20, 45), b'20:45'), (datetime.time(21, 0), b'21:00'), (datetime.time(21, 15), b'21:15'), (datetime.time(21, 30), b'21:30'), (datetime.time(21, 45), b'21:45'), (datetime.time(22, 0), b'22:00'), (datetime.time(22, 15), b'22:15'), (datetime.time(22, 30), b'22:30'), (datetime.time(22, 45), b'22:45'), (datetime.time(23, 0), b'23:00'), (datetime.time(23, 15), b'23:15'), (datetime.time(23, 30), b'23:30'), (datetime.time(23, 45), b'23:45')])),
                ('end', models.TimeField(choices=[(datetime.time(0, 0), b'00:00'), (datetime.time(0, 15), b'00:15'), (datetime.time(0, 30), b'00:30'), (datetime.time(0, 45), b'00:45'), (datetime.time(1, 0), b'01:00'), (datetime.time(1, 15), b'01:15'), (datetime.time(1, 30), b'01:30'), (datetime.time(1, 45), b'01:45'), (datetime.time(2, 0), b'02:00'), (datetime.time(2, 15), b'02:15'), (datetime.time(2, 30), b'02:30'), (datetime.time(2, 45), b'02:45'), (datetime.time(3, 0), b'03:00'), (datetime.time(3, 15), b'03:15'), (datetime.time(3, 30), b'03:30'), (datetime.time(3, 45), b'03:45'), (datetime.time(4, 0), b'04:00'), (datetime.time(4, 15), b'04:15'), (datetime.time(4, 30), b'04:30'), (datetime.time(4, 45), b'04:45'), (datetime.time(5, 0), b'05:00'), (datetime.time(5, 15), b'05:15'), (datetime.time(5, 30), b'05:30'), (datetime.time(5, 45), b'05:45'), (datetime.time(6, 0), b'06:00'), (datetime.time(6, 15), b'06:15'), (datetime.time(6, 30), b'06:30'), (datetime.time(6, 45), b'06:45'), (datetime.time(7, 0), b'07:00'), (datetime.time(7, 15), b'07:15'), (datetime.time(7, 30), b'07:30'), (datetime.time(7, 45), b'07:45'), (datetime.time(8, 0), b'08:00'), (datetime.time(8, 15), b'08:15'), (datetime.time(8, 30), b'08:30'), (datetime.time(8, 45), b'08:45'), (datetime.time(9, 0), b'09:00'), (datetime.time(9, 15), b'09:15'), (datetime.time(9, 30), b'09:30'), (datetime.time(9, 45), b'09:45'), (datetime.time(10, 0), b'10:00'), (datetime.time(10, 15), b'10:15'), (datetime.time(10, 30), b'10:30'), (datetime.time(10, 45), b'10:45'), (datetime.time(11, 0), b'11:00'), (datetime.time(11, 15), b'11:15'), (datetime.time(11, 30), b'11:30'), (datetime.time(11, 45), b'11:45'), (datetime.time(12, 0), b'12:00'), (datetime.time(12, 15), b'12:15'), (datetime.time(12, 30), b'12:30'), (datetime.time(12, 45), b'12:45'), (datetime.time(13, 0), b'13:00'), (datetime.time(13, 15), b'13:15'), (datetime.time(13, 30), b'13:30'), (datetime.time(13, 45), b'13:45'), (datetime.time(14, 0), b'14:00'), (datetime.time(14, 15), b'14:15'), (datetime.time(14, 30), b'14:30'), (datetime.time(14, 45), b'14:45'), (datetime.time(15, 0), b'15:00'), (datetime.time(15, 15), b'15:15'), (datetime.time(15, 30), b'15:30'), (datetime.time(15, 45), b'15:45'), (datetime.time(16, 0), b'16:00'), (datetime.time(16, 15), b'16:15'), (datetime.time(16, 30), b'16:30'), (datetime.time(16, 45), b'16:45'), (datetime.time(17, 0), b'17:00'), (datetime.time(17, 15), b'17:15'), (datetime.time(17, 30), b'17:30'), (datetime.time(17, 45), b'17:45'), (datetime.time(18, 0), b'18:00'), (datetime.time(18, 15), b'18:15'), (datetime.time(18, 30), b'18:30'), (datetime.time(18, 45), b'18:45'), (datetime.time(19, 0), b'19:00'), (datetime.time(19, 15), b'19:15'), (datetime.time(19, 30), b'19:30'), (datetime.time(19, 45), b'19:45'), (datetime.time(20, 0), b'20:00'), (datetime.time(20, 15), b'20:15'), (datetime.time(20, 30), b'20:30'), (datetime.time(20, 45), b'20:45'), (datetime.time(21, 0), b'21:00'), (datetime.time(21, 15), b'21:15'), (datetime.time(21, 30), b'21:30'), (datetime.time(21, 45), b'21:45'), (datetime.time(22, 0), b'22:00'), (datetime.time(22, 15), b'22:15'), (datetime.time(22, 30), b'22:30'), (datetime.time(22, 45), b'22:45'), (datetime.time(23, 0), b'23:00'), (datetime.time(23, 15), b'23:15'), (datetime.time(23, 30), b'23:30'), (datetime.time(23, 45), b'23:45')])),
                ('day', models.ForeignKey(related_name=b'times', to='lab.DayConfig')),
            ],
            options={
                'ordering': ('start', 'end'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserCat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('order', models.IntegerField(default=0, null=True, blank=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('forms_description', models.TextField(blank=True)),
                ('forms_expandable', models.BooleanField(default=False)),
                ('forms_order', models.IntegerField(default=0, null=True, blank=True)),
                ('parent', mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.UserCat', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserFormRec',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('observations', models.TextField(blank=True)),
                ('rec', models.TextField(blank=True)),
                ('form', models.ForeignKey(related_name=b'userformrecs', to='lab.Form')),
                ('user', models.ForeignKey(related_name=b'userformrecs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VisitBuilder',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('qty_slots', models.IntegerField(default=None, null=True, editable=False, blank=True)),
                ('qty_slots_skips', models.IntegerField(default=None, null=True, editable=False, blank=True)),
                ('qty_locs', models.IntegerField(default=None, null=True, editable=False, blank=True)),
                ('qty_locs_skips', models.IntegerField(default=None, null=True, editable=False, blank=True)),
                ('qty_node_skips', models.IntegerField(default=None, null=True, editable=False, blank=True)),
                ('qty_visits', models.IntegerField(default=None, null=True, editable=False, blank=True)),
                ('generated', models.DateTimeField(null=True, editable=False, blank=True)),
                ('generate', models.BooleanField(default=False)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
                ('forcebricks', models.BooleanField(default=True)),
                ('duration', models.TimeField(default=datetime.time(0, 45), choices=[(datetime.time(0, 15), b'00:15'), (datetime.time(0, 30), b'00:30'), (datetime.time(0, 45), b'00:45'), (datetime.time(1, 0), b'01:00'), (datetime.time(1, 15), b'01:15'), (datetime.time(1, 30), b'01:30')])),
                ('gap', models.TimeField(default=datetime.time(0, 15), choices=[(datetime.time(0, 15), b'00:15'), (datetime.time(0, 30), b'00:30'), (datetime.time(0, 45), b'00:45'), (datetime.time(1, 0), b'01:00'), (datetime.time(1, 15), b'01:15'), (datetime.time(1, 30), b'01:30')])),
                ('orderby', models.CharField(default=b'zip', max_length=20, choices=[(b'area', b'area'), (b'city', b'city'), (b'state', b'state'), (b'country', b'country'), (b'zip', b'zip'), (b'brick', b'brick')])),
                ('isand', models.BooleanField(default=True, help_text=b'Check to use [AND] & [OR] levels, otherwise [OR] & [AND]. Note that [OR] is always implicit within each group.')),
                ('node', models.ForeignKey(related_name=b'builders', to='lab.ForceNode')),
                ('periodcats', lab.models.GoTreeM2MField(related_name=b'builders', to='lab.PeriodCat', blank=True)),
                ('periods', models.ManyToManyField(related_name=b'builders', to='lab.Period', blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VisitCond',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200, blank=True)),
                ('areas', models.ManyToManyField(related_name=b'conds', to='lab.Area', blank=True)),
                ('bricks', models.ManyToManyField(related_name=b'conds', to='lab.Brick', blank=True)),
                ('builder', models.ForeignKey(related_name=b'conds', to='lab.VisitBuilder')),
                ('cities', models.ManyToManyField(related_name=b'conds', to='lab.City', blank=True)),
                ('countries', models.ManyToManyField(related_name=b'conds', to='lab.Country', blank=True)),
                ('loccats', lab.models.GoTreeM2MField(related_name=b'conds', to='lab.LocCat', blank=True)),
                ('placecats', lab.models.GoTreeM2MField(related_name=b'conds', to='lab.PlaceCat', blank=True)),
                ('states', models.ManyToManyField(related_name=b'conds', to='lab.State', blank=True)),
                ('usercats', lab.models.GoTreeM2MField(related_name=b'conds', to='lab.UserCat', blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WeekConfig',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(max_length=200)),
                ('fri', models.ForeignKey(related_name=b'weeks_fri', blank=True, to='lab.DayConfig', null=True)),
                ('mon', models.ForeignKey(related_name=b'weeks_mon', blank=True, to='lab.DayConfig', null=True)),
                ('sat', models.ForeignKey(related_name=b'weeks_sat', blank=True, to='lab.DayConfig', null=True)),
                ('sun', models.ForeignKey(related_name=b'weeks_sun', blank=True, to='lab.DayConfig', null=True)),
                ('thu', models.ForeignKey(related_name=b'weeks_thu', blank=True, to='lab.DayConfig', null=True)),
                ('tue', models.ForeignKey(related_name=b'weeks_tue', blank=True, to='lab.DayConfig', null=True)),
                ('wed', models.ForeignKey(related_name=b'weeks_wed', blank=True, to='lab.DayConfig', null=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Zip',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('syscode', lab.models.GoNullableUniqueField(max_length=200, unique=True, null=True, blank=True)),
                ('name', models.CharField(unique=True, max_length=200, verbose_name='name')),
                ('brick', models.ForeignKey(related_name=b'zips', to='lab.Brick')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='visitcond',
            name='zips',
            field=models.ManyToManyField(related_name=b'conds', to='lab.Zip', blank=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='userformrec',
            unique_together=set([('user', 'form')]),
        ),
        migrations.AddField(
            model_name='sys',
            name='week_period',
            field=models.ForeignKey(related_name=b'sys_period', to='lab.WeekConfig'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='sys',
            name='week_user_visit',
            field=models.ForeignKey(related_name=b'sys_user_visit', to='lab.WeekConfig'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='sys',
            name='week_user_visited',
            field=models.ForeignKey(related_name=b'sys_user_visited', to='lab.WeekConfig'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='state',
            unique_together=set([('country', 'name')]),
        ),
        migrations.AddField(
            model_name='place',
            name='cats',
            field=lab.models.GoTreeM2MField(related_name=b'places', to='lab.PlaceCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='place',
            name='parent',
            field=mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.Place', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='period',
            name='cats',
            field=lab.models.GoTreeM2MField(related_name=b'periods', to='lab.PeriodCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='period',
            name='week',
            field=models.ForeignKey(related_name=b'periods', blank=True, to='lab.WeekConfig', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='loc',
            name='cats',
            field=lab.models.GoTreeM2MField(related_name=b'locs', to='lab.LocCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='loc',
            name='place',
            field=models.OneToOneField(related_name=b'loc', null=True, blank=True, to='lab.Place'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='loc',
            name='user',
            field=models.ForeignKey(related_name=b'locs', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='loc',
            name='week',
            field=models.ForeignKey(related_name=b'locs', blank=True, to='lab.WeekConfig', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='item',
            name='cats',
            field=lab.models.GoTreeM2MField(related_name=b'items', to='lab.ItemCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='item',
            name='visits_loccats',
            field=lab.models.GoTreeM2MField(related_name=b'visits_items', to='lab.LocCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='item',
            name='visits_usercats',
            field=lab.models.GoTreeM2MField(related_name=b'visits_items', to='lab.UserCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='formfield',
            name='optscat',
            field=models.ForeignKey(related_name=b'fields', blank=True, to='lab.GenericCat', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='formfield',
            name='types',
            field=models.ManyToManyField(related_name=b'formfields', to='lab.FormType', blank=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='formfield',
            unique_together=set([('form', 'name')]),
        ),
        migrations.AddField(
            model_name='form',
            name='cats',
            field=lab.models.GoTreeM2MField(related_name=b'forms', to='lab.FormCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='repitemcats',
            field=lab.models.GoTreeM2MField(related_name=b'repforms', to='lab.ItemCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='repitems',
            field=models.ManyToManyField(related_name=b'repforms', to='lab.Item', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='repusercats',
            field=lab.models.GoTreeM2MField(related_name=b'repforms', to='lab.UserCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='types',
            field=models.ManyToManyField(related_name=b'forms', to='lab.FormType', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='users_loccats',
            field=lab.models.GoTreeM2MField(related_name=b'users_forms', to='lab.LocCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='users_usercats',
            field=lab.models.GoTreeM2MField(related_name=b'users_forms', to='lab.UserCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='visits_bricks',
            field=models.ManyToManyField(related_name=b'visits_forms', to='lab.Brick', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='visits_forcenodes',
            field=lab.models.GoTreeM2MField(related_name=b'visits_forms', to='lab.ForceNode', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='visits_itemcats',
            field=lab.models.GoTreeM2MField(related_name=b'visits_forms', to='lab.ItemCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='visits_loccats',
            field=lab.models.GoTreeM2MField(related_name=b'visits_forms', to='lab.LocCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='form',
            name='visits_usercats',
            field=lab.models.GoTreeM2MField(related_name=b'visits_forms', to='lab.UserCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='forcevisit',
            name='builder',
            field=models.ForeignKey(related_name=b'visits', blank=True, to='lab.VisitBuilder', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='forcevisit',
            name='loc',
            field=models.ForeignKey(related_name=b'visits', to='lab.Loc'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='forcevisit',
            name='node',
            field=models.ForeignKey(related_name=b'visits', to='lab.ForceNode'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='forcenode',
            name='itemcats',
            field=lab.models.GoTreeM2MField(related_name=b'nodes', to='lab.ItemCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='forcenode',
            name='locs',
            field=models.ManyToManyField(related_name=b'nodes', through='lab.ForceVisit', to='lab.Loc', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='forcenode',
            name='parent',
            field=mptt.fields.TreeForeignKey(related_name=b'children', blank=True, to='lab.ForceNode', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='forcenode',
            name='user',
            field=models.ForeignKey(related_name=b'nodes', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(related_name=b'cities', to='lab.State'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together=set([('state', 'name')]),
        ),
        migrations.AddField(
            model_name='area',
            name='city',
            field=models.ForeignKey(related_name=b'areas', to='lab.City'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='area',
            name='zip',
            field=models.ForeignKey(related_name=b'areas', to='lab.Zip'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='area',
            unique_together=set([('city', 'name')]),
        ),
        migrations.AddField(
            model_name='address',
            name='area',
            field=models.ForeignKey(related_name=b'addresses', to='lab.Area'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='cats',
            field=lab.models.GoTreeM2MField(related_name=b'users', to='lab.UserCat', blank=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Group', blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of his/her group.', verbose_name='groups'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Permission', blank=True, help_text='Specific permissions for this user.', verbose_name='user permissions'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='week_visit',
            field=models.ForeignKey(related_name=b'users_visit', blank=True, to='lab.WeekConfig', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='user',
            name='week_visited',
            field=models.ForeignKey(related_name=b'users_visited', blank=True, to='lab.WeekConfig', null=True),
            preserve_default=True,
        ),
    ]
